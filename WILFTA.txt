
	1. First thing you learnt from this app is that you can create reusable items such as View, Textfield and Label. You generate AuthHeaderView which is a view and you added some components like label and imageView. Then you add init to this and want some title and subtitles because you create variable from this AuthHeaderView in SignInVC. When you generate variables it asks you to give string for title and subtitle. Then you're adding this view to your signInVC view. There are two views on SignInVC. And lastly you give constraints of this view. This is the way of reusing any type of components. You simply create a variable from it within any ViewController. 
	
	2. You used switch case with enum case many times. First you created enum to classify user interface components and then you used switch instead of using if statements. It is very convenient while using enum. And you give some unique features to buttons, textfields and labels etc. The examples are situated in CustomTextField.swift and CustomButton.swift. 

	3. You used if statements with abbreviations. It is like this, " let titleColor : UIColor = hasbackground ? .white : .systemBlue ". Hasbackground is a Boolean value and you're saying that if it is true make it white , if not make it systemBlue. Only question mark ? and colon : are used while creating this if statement. It is available in CustomButton.swift.
	
	4. I learnt another presentation between ViewControllers. Not between but directly to root ViewController or firstPage. This is "self.navigationController?.popToRootViewController(animated: true) ". When you hook this code to a button, it directly takes you to first page doesn't matter on what page you are. So it is different from navigationController.pushviewController(...) or navigationController.show(...) or navigationController.present(...).

	5. If we want to get back to previous ViewController we can use without "root" like "self.navigationController?.popViewController(animated: true/false)" This code takes us to just previous ViewController not the top of the hierarchy like rootViewController.  

	6. You learned UITextView() which is like a label but it has lots of text attributes. It is generally used for long texts and for links that is attached to a certain word or sentence within in the paragraph. We use NSAttributedString() or the sub-class of this NSAttributedString() which is NSMutableAttributedString(). You used NSMutableAttributedString() to give a feature of tappable to a "Terms & conditions" word. All of them is situated in SignUpVC() page.


	Code goes like .

			
        let text1 = "By creating an account you aggree to our Terms & Conditions and you acknowledge that you have read our Privacy Policy"
        let attributedString = NSMutableAttributedString(string: text1)
        
        let termsRange1 = ( text1 as NSString).range(of: "Terms & Conditions")
        attributedString.addAttribute(.link, value: "https://policies.google.com/terms?hl=en-US", range: termsRange1)

	   textView1.attributedText = attributedString		
							
	--> now "Terms & Conditions" is tappable and takes you to web browser of the device by navigating the website we specified with in value.


		 

	7. "override func loadView()" function is called before viewDidLoad() func. Understand the life cycle which goes respectively. 

* init() > loadView() > viewDidLoad() > viewWillAppear () > viewDidApper(). This is the order when a page is launched. While it is closed to pass another page. It works
* viewWillDisappear > viewDidDisappear .. and then the cycle above this text is released for another UIViewController. 

But you should understand the fact that loadView() func is launched before viewDidLoad(). It is used before view is loaded. 

	8. You also learned WebKit library that is used to launch a webpage on your app. This is very useful and handy when it comes to exhibiting, displaying some web pages. With the help of this library you can show any websites in your app. To do that, you should use WKWebView. How to use and how to install in your ViewController is shown within TermsVC and PrivacyVC. We turned these ViewControllers into web pages via WKWebView. 

	9. While you are trying to add a NavigationBarButtonItem to your TermsVC , you run into an error due to the lack of NavigationController. You introduce a modal passage from SignUpVC to TermsVC within one of the functions of UITextViewDelegate which is "shouldInteractWith" func. If there is no navigationController in a page you can't add a bar button to it. But you figured out to add a navigation before you create a passage from SingUpVC. 

			let termsVC = TermsVC()
               let navCont = UINavigationController(rootViewController: termsVC)
               self.navigationController?.present(navCont, animated: true)            with this code FÄ°RST you are adding a navigation controller to your TermsVC and introducing a .present() passage. (Use navigate not a pass in English while describing a passage between view controllers).


	10. You also figure out that 

		func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange) -> Bool {
            	if URL.absoluteString == "policy" {															

with this function which is one of the UITextViewDelegate function, you are deciding what to do with NSMutableAttributedString. If you write if URL.link == "..." , you have to go to a web browser directly , if you want to make something different with this attributed string you should write .obsoluteString == "...". You created this in the SignUpVC. You check from there. But don't forget to equal delegate of variable of UITextView to self !


	11. If you write 

				@objc func didTapBarButton() { self.dismiss(animated: true) } that code and used it with a button, when you tapped the button the page is closed. This code I mean .dismiss(...) code means close, terminate the ViewController. And you used this both TermsVC and PrivacyVC to terminate the ViewControllers. You attach, link this code this function to right bar button. 

	+Plus: Note about .dismiss(). It includes completion if you want, like .dismiss(animated:true, completion: () -> Void). If you enter this completion it looks like this .dismiss(animated:true) { //you can write any code you want to make completion handler do ...}. 

	12. You dealt with web pages and URLs to create a webpage viewController but apple doesn't allow its applications to use insecure http protocols so you can't open a http://www.blabla.com. Only let https://... web protocols. So you yourself should adjust it over Info.plist. Process steps :

	Info.plist > Information Property List > App Transport Security Settings > Allow Arbitrary Loads = YES .

       						 
   	13. You learned how to give features to attributedString after made it link with NSMutableAttributedString. You use a dictionary format to do that :

	textView1.linkTextAttributes = [NSAttributedString.Key.font: 
									UIFont.systemFont(ofSize: 12, weight: .bold),
                                        .foregroundColor : UIColor.red]			


	you can write only .font as well. Because linkTextAttributes corresponds to NSAttributedString.Key. 

This is the link of this lesson : https://www.youtube.com/watch?v=6h5TrAtyQi8&list=PLWOgAHhZbsIEM4AibGeAI_H66l0RpQCOX&index=5


	14. You learned a shortcut. The name of it is "Open Quickly". It opens a rectangle search box. You type whatever you look for in it. It is very useful and handy when it comes to searching something and finding it quickly. You open this window with "Command + Shift + O (letter) " keybutton combination. 


	+Plus Note: Another shortcut you learnt which is a huge time-saver in changing some features of variables, functions, classes etc. collectively. It enables you to do the same repetitive work at once. You can select many code lines just by pressing "opt" and dragging the mouse click. That's all you can select every lines on Xcode. (Link: https://www.linkedin.com/pulse/maximizing-xcode-efficiency-14-tips-boosting-productivity/ )

	15. You added an AlertManager.swift to your project to form reusable UIAlertController and UIAlertAction. These components will be used many times by other ViewController so you prevent the code from repeating itself again and again on every page. So that you make this alert work on other ViewController you added a UIViewController as a parameter to it. This enables you to use this Alert on every page just by giving this ViewController parameters "self". The example is present in AlertManager and other ViewControllers.

	16. You learnt parameter labels which means that a word written just before the name of parameters within functions. To give an example, 

		func greet(person name: String) {
    		print("Hello, \(name)!")
		}                						----> here name is parameter name, String is parameter type and person is parameter label. You can type whatever you want. They are used to amplify readability and clarity of code. They don't perform any task other than giving extra information that developer would like to. 
	
	In summary: 

				func funcName (parameterLabel parameterName: ParameterType) {
   					 // The content of a common function
					}


	17. You come across an "sandbox: rsync.samba(41021)....." error following integration of FireBase libraries with Cocoapods. This happens whenever you integrate Firebase with Cocoapods into your app. Nevertheless the solution is very simple. You just change " Project > Build Settings > Build Options > User Script SandBoxing ----> NO " that's all. You changes yes to no and rebuild app it is solved.

	18. You learnt a new func that is able to sense, perceive user touch, tap the screen. And you are using it to end keyboard when user is done with it. 

		  		  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        					view.endEditing(true)
					}															
----> this function terminates the keyboard that opened on the screen. User touch on the view and the keyboard of device is closed. You used this in both SignInVC and SignUpVC page 

	18. Closures or completion handlers... We can use a closure as a parameter of a function. We have mentioned the fact that functions can take another function as a parameter. And closures are unnamed functions. So we can give a closure to function as a parameter. At this point, despite the fact that we don't see it , there is a prefix "non-escaping" which means that this closure cannot be used outside of this function. However there are two types of closures that different from each other. First is conventional closure that has an invisible prefix but on the other hand, if we want to use a closure outside of a function we have to put a prefix "@escaping". With this prefix, the closure that we have given to function as parameter can be used outside of function anywhere we call our function. ALSO this " @escaping closure : (alb) -> Void " is kept in memory even after the function is done executing. Which means that we can use this closure's result on another ViewController or asynchronous process. I have used this @escaping closure in Repo and SignUpVC to navigate to HomePage according to result of authentication. (This link serves a good info. About closure  " https://fozoglu.me/swiftte-escaping-ve-non-escaping/ ")




















 