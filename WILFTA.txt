
	1. First thing you learnt from this app is that you can create reusable items such as View, Textfield and Label. You generate AuthHeaderView which is a view and you added some components like label and imageView. Then you add init to this and want some title and subtitles because you create variable from this AuthHeaderView in SignInVC. When you generate variables it asks you to give string for title and subtitle. Then you're adding this view to your signInVC view. There are two views on SignInVC. And lastly you give constraints of this view. This is the way of reusing any type of components. You simply create a variable from it within any ViewController. 
	
	2. You used switch case with enum case many times. First you created enum to classify user interface components and then you used switch instead of using if statements. It is very convenient while using enum. And you give some unique features to buttons, textfields and labels etc. The examples are situated in CustomTextField.swift and CustomButton.swift. 

	3. You used if statements with abbreviations. It is like this, " let titleColor : UIColor = hasbackground ? .white : .systemBlue ". Hasbackground is a Boolean value and you're saying that if it is true make it white , if not make it systemBlue. Only question mark ? and colon : are used while creating this if statement. It is available in CustomButton.swift.
	
	4. I learnt another presentation between ViewControllers. Not between but directly to root ViewController or firstPage. This is "self.navigationController?.popToRootViewController(animated: true) ". When you hook this code to a button, it directly takes you to first page doesn't matter on what page you are. So it is different from navigationController.pushviewController(...) or navigationController.show(...) or navigationController.present(...).

	5. If we want to get back to previous ViewController we can use without "root" like "self.navigationController?.popViewController(animated: true/false)" This code takes us to just previous ViewController not the top of the hierarchy like rootViewController.  

	6. You learned UITextView() which is like a label but it has lots of text attributes. It is generally used for long texts and for links that is attached to a certain word or sentence within in the paragraph. We use NSAttributedString() or the sub-class of this NSAttributedString() which is NSMutableAttributedString(). You used NSMutableAttributedString() to give a feature of tappable to a "Terms & conditions" word. All of them is situated in SignUpVC() page.


	Code goes like .



		 

	7. "override func loadView()" function is called before viewDidLoad() func. Understand the life cycle which goes respectively. 

* init() > loadView() > viewDidLoad() > viewWillAppear () > viewDidApper(). This is the order when a page is launched. While it is closed to pass another page. It works
* viewWillDisappear > viewDidDisappear .. and then the cycle above this text is released for another UIViewController. 

But you should understand the fact that loadView() func is launched before viewDidLoad(). It is used before view is loaded. 

	8. You also learned WebKit library that is used to launch a webpage on your app. This is very useful and handy when it comes to exhibiting, displaying some web pages. With the help of this library you can show any websites in your app. To do that, you should use WKWebView. How to use and how to install in your ViewController is shown within TermsVC and PrivacyVC. We turned these ViewControllers a web page via WKWebView. 

	9. While you are trying to add a NavigationBarButtonItem to your TermsVC , you run into an error due to the lack of NavigationController. You introduce a modal passage from SignUpVC to TermsVC within one of the functions of UITextViewDelegate which is "shouldInteractWith" func. If there is no navigationController in a page you can't add a bar button to it. But you figured out to add a navigation before you create a passage from SingUpVC. 

			let termsVC = TermsVC()
               let navCont = UINavigationController(rootViewController: termsVC)
               self.navigationController?.present(navCont, animated: true)            with this code FÄ°RST you are adding a navigation controller to your TermsVC and introducing a .present() passage. (Use navigate not a pass in English while describing a passage between view controllers).


	10. You also figure out that 

		func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange) -> Bool {
            	if URL.absoluteString == "policy" {															

with this function which is one of the UITextViewDelegate function, you are deciding what to do with NSMutableAttributedString. If you write if URL.link == "..." , you have to go to a web browser directly , if you want to make something different this attributed string you should write .obsoluteString == "...". You created this in the SignUpVC. You check from there. But don't forget to equal delegate of variable of UITextView to self !


	11. If you write 

				@objc func didTapBarButton() { self.dismiss(animated: true) } that code and used it with a button, when you tapped the button the page is closed. This code I mean .dismiss(...) code means close, terminate the ViewController. And you used this both TermsVC and PrivacyVC to terminate the ViewControllers. You attach, link this code this function to rightbar button. 

	+Plus: Note about .dismiss(). It includes completion if you want, like .dismiss(animated:true, completion: () -> Void). If you enter this completion it looks like this .dismiss(animated:true) { //you can write any code you want to make completion handler do ...}. 

	12. You dealt with web pages and URLs to create a webpage viewController but apple doesn't allow its applications to use insecure http protocols so you can't open a http://www.blabla.com. Only let https://... web protocols. So you yourself should adjust it over Info.plist. Process steps :

	Info.plist > Information Property List > App Transport Security Settings > Allow Arbitrary Loads = YES .

       						 
   						
















 